# -*- coding: utf-8 -*-
"""
Created on Thu Nov 23 14:47:35 2023

@author: asalehi
"""


'''

Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point
Please Do not Edit this file on Share Point


'''

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

Out_Put_Dir = r'C:\Users\asalehi\OneDrive - University of Waterloo\Documents - SaariLab\CVC\Buildings\Amirreza\Adaptation\Github_Adaptation\MASc_Waterloo_Adaptation_Buildings\Data'

#%% Plot Functions 
def NPV_Plot(gdf_list):
    PNG_Dir = r'C:\Users\asalehi\OneDrive - University of Waterloo\Documents - SaariLab\CVC\Buildings\Amirreza\Adaptation\Plots\Beta\\'
    y = 1981
    for i in gdf_list:
        i.plot( column = i['Benefit_individal'], legend = True, cmap= 'turbo' )
        plt.title('Individual' + str(y))
        plt.savefig(PNG_Dir + 'INDIVIDUAL' + str(y) +'.PNG')
        #i.plot( column = i['Benefit_pop'], legend = True, cmap = 'turbo')
        #plt.title('POP' + str(y))
        #plt.savefig(PNG_Dir + 'Population' + str(y) +'.PNG')
        y += 1
    return 0

# %% Initializing Functions
def init_AQ_Grids( dir = 'Data/AQgrid.gpkg'):
    #This Function Loads the AQ Grids
    AQ_Grid_gdf = gpd.read_file(dir)
    return AQ_Grid_gdf

def init_County( dir = 'Data/County_Main_Land.gpkg'):
    #This Function Loads the Counties
    County_gdf = gpd.read_file(dir)
    return County_gdf

def init_PM_Concentrations( dir = 'Data/PM_Grid_Daily_Concentration_1981_2010.csv'):
    # This Function loads PM2.5 Concentration per Grid Cell per year. 
    #The Values column contains a string of 365 daily concentration
    PM_Concentrations_df = pd.read_csv(dir)
    
    PM_Concentrations_dict = {}

    for index, row in PM_Concentrations_df.iterrows():
        year = row['Year']
        row_col_key = (row['COL'], row['ROW'])
        mean_value = row['Mean']
    
        if year not in PM_Concentrations_dict:
            PM_Concentrations_dict[year] = {}
    
        PM_Concentrations_dict[year][row_col_key] = mean_value
    
    return PM_Concentrations_df, PM_Concentrations_dict

def init_Buildings_Stock( dir = 'Data/Buildings_Stock.csv'):
    #This Function Loads the Buildings Stock
    Buildings_Stock_df = pd.read_csv(dir)
    return Buildings_Stock_df


def init_Population( dir = 'Data/Population.csv'):
    #The Current Sate of The Model only Uses 2000 Population data based on Leuple 
    Population_df = pd.read_csv(dir)
    
    Population_dict = {}

    for index, row in Population_df.iterrows():
        population = row['2000']
        row_col_key = (row['COL'], row['ROW'])
        
        Population_dict[row_col_key] = population
    return Population_df, Population_dict

def init_Health_Model():
    #This values need to be Corrected
    Baseline_Mortality = 0.01
    Relative_Risk = 1.14
    VSL = 7000000
    return Baseline_Mortality, Relative_Risk, VSL

def init_Retrofit_Type( dir = 'Data/Retrofit_Types.csv' ):
    
    Retrofit_Types_df = pd.read_csv(dir)
    return Retrofit_Types_df

# %% Buildingd Part
'''
def PM_to_Grid_gdf(PM_Concentrations = init_PM_Concentrations() , AQ_Grid_gdf = init_AQ_Grids()): 
    return
'''
def ACH50_to_County(Buildings_Stock_df, County_gdf = init_County() ):
    #This Function assigns average value of ACH50 to each County
    #The Current Method for Averaging is per building
    County_List = County_gdf['FIPS'].to_list()
    Buildings_Stock_df_Copy = Buildings_Stock_df.copy(deep = True)
    ACH50_dict = dict()
    for C in County_List:
        Target_Stock = Buildings_Stock_df_Copy[ Buildings_Stock_df_Copy['FIPS'] == C]
        ACH50_mean = Target_Stock['ACH50'].mean()
        ACH50_dict.update({ C : ACH50_mean})
        
    County_gdf['ACH50_mean'] = County_gdf['FIPS'].map(ACH50_dict)
    return County_gdf

def County_to_Grid():
    # I've done something similar in 
    # "C:\Users\matts\OneDrive - University of Waterloo\Sparks\PNAS\WorkingFolder\Code\General\counties_to_grid_Updated.py"
    return

def ACH50_to_INF( ACH_50):
    # There are a few ways to do this. One is shown below, from Amy Li
    # MS note, I think the P value is high here and gives high FINF values
    ACH_Natural = ACH_50 / 20
    P = 0.97 # Penetration factor (how much PM gets inside)
    K = 0.39 # Deposition factor (how fast PM settles)
    F_INF = (P * ACH_Natural) / (ACH_Natural + K)
    return F_INF

def Costs_Retrofit():
    return 1

# %% Health Model
def Delta_Exposure_Calculator(PM_Concentration, Old_F_INF, New_F_INF):
    Delta_Exposure = PM_Concentration * ( Old_F_INF - New_F_INF)  #We need to work on this, but okay for now. Assumes everyone stays home always.
    return Delta_Exposure

def Delta_Risk_Calculator(Baseline_Mortality, Relative_Risk, PM_Concentration, Old_F_INF, New_F_INF):
    Concentration_Change_Sensitivity = 10  #ug/m3
    Delta_Exposure = Delta_Exposure_Calculator(PM_Concentration, Old_F_INF, New_F_INF)
    Delta_Risk = Baseline_Mortality * (Delta_Exposure/Concentration_Change_Sensitivity) * ((Relative_Risk-1) / Relative_Risk)
    return Delta_Risk

def Benefit_Retrofit_Calculator(VSL, Baseline_Mortality, Relative_Risk, PM_Concentration, Old_F_INF, New_F_INF):
    Delta_Risk = Delta_Risk_Calculator(Baseline_Mortality, Relative_Risk, PM_Concentration, Old_F_INF, New_F_INF) 
    Benefit_Retrofit = Delta_Risk * VSL
    return Benefit_Retrofit

def PV_Benefit_Calculator(Interest_Rate, Base_Year, Secondary_Year, VSL, Baseline_Mortality, Relative_Risk, PM_Concentration, Old_F_INF, New_F_INF):
    
    Benefit = Benefit_Retrofit_Calculator(VSL, Baseline_Mortality, Relative_Risk, PM_Concentration, Old_F_INF, New_F_INF)
    PV_Benefit = PV_Convertor(Interest_Rate, Base_Year, Secondary_Year, Benefit)
    return PV_Benefit

#%% NPV Part
def PV_Convertor(Interest_Rate, Base_Year, Secondary_Year, Value):
    
    #Interest Rate in percentage : Interest_Rate = 10
    
    Delta_Year = Secondary_Year - Base_Year
    PV = Value / (1 + (Interest_Rate/100)) ** Delta_Year
    return PV


def NPV_Calculation( PV_Cost, PV_Benefit):
    NPV = PV_Benefit - PV_Cost
    return NPV

def GRID_NPV():
    return

#%% Model Run
def iterate_GRID( AQ_Grid_gdf = init_AQ_Grids(), County_gdf = 0, year = 1981, Interest_Rate = 0.05):
    BMR, RR, VSL_1 = init_Health_Model()
    PM_Concentrations, PM_dict = init_PM_Concentrations()
    Population, Population_dict = init_Population()
    
    b_individial_list = []
    b_pop_list = []
    
    AQ_Grid_gdf2 = AQ_Grid_gdf.copy()
    
    for IDX, row in AQ_Grid_gdf.iterrows():
        Grid_Key = (row['COL'],row['ROW'])
        PMC = PM_dict[year][ (row['COL'],row['ROW']) ]
        if Grid_Key in Population_dict.keys():
            POP = Population_dict[ (row['COL'],row['ROW']) ]
            if POP < 1000000:
                POP = 1000000
        else:
            POP = 1000000
        ##
        #b_individial = Benefit_Retrofit_Calculator(VSL_1, BMR, RR, PMC, 0.95, 0.8)
        ##
        b_individial = PV_Benefit_Calculator(Interest_Rate, 1981, year, VSL_1, BMR, RR, PMC, 0.95, 0.8)
        ##
        b_pop = b_individial * POP
        b_individial_list.append(b_individial)
        b_pop_list.append(b_pop)
    AQ_Grid_gdf2['Benefit_individal'] = b_individial_list
    AQ_Grid_gdf2['Benefit_pop'] = b_pop_list
    return AQ_Grid_gdf2

def iterate_YEAR(Interest_Rate = 0.05):
    gdf_list = []
    for year in range(1981,2011):
        new_gdf = iterate_GRID( year = year, Interest_Rate = Interest_Rate)
        gdf_list.append(new_gdf)
    
    return gdf_list

#%% Main

new_grid = iterate_GRID()
new_grid.plot( column = new_grid['Benefit_individal'], legend = True, cmap = 'turbo' )

new_grid.plot( column = new_grid['Benefit_pop'], legend = True, cmap = 'turbo' )


year_grid_1 = iterate_YEAR(Interest_Rate = 0.05)
year_grid = iterate_YEAR(Interest_Rate = 0.15)

NPV_Plot(year_grid)
NPV_Plot(year_grid_1)

#%% Tests 1
PM_Concentrations, PM_dict = init_PM_Concentrations()

BMR, RR, VSL_1 = init_Health_Model()
PMC = PM_dict[1981][(3,5)]
DE = Delta_Exposure_Calculator( PMC, 0.8, 0.95)
RDR = Delta_Risk_Calculator(BMR,  DE, RR)
b1 = Benefit_Retrofit_Calculator(RDR ,VSL_1)
print(b1)
#%% Tests 2
test = PV_Convertor(10, 2000, 2001, 110)
print(test)

AQ_Grid_gdf = init_AQ_Grids()
print(AQ_Grid_gdf.crs)
AQ_Grid_gdf.plot()

test3 = init_County()
print(test3.crs)
test3.plot()

test4 = init_Buildings_Stock()
test4.head()

test5 = ACH50_to_County(test4, test3)
PM_Concentrations, PM_dict = init_PM_Concentrations()
PM_dict[2010][(10,5)]

test6 = ACH50_to_INF( 15.9894 )
test7, test8 = init_Population()
# Assuming test6 is your GeoDataFrame
ax = test5.plot(column='ACH50_mean', legend=True)
# Set the title of the plot
ax.set_title("ACH50")
# Show the plot
plt.show()


